---
format: 
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width = 8)

library(dplyr)
library(DT)
library(here)
library(ggplot2)
library(leaflet)
library(lubridate)
library(plotly)
library(purrr)
library(qaqcmar)
library(RColorBrewer)
library(readr)
library(sensorstrings)
library(strings)
library(summaryplots)
library(tidyr)
library(viridis)

source(here("functions/filter_out_suspect_obs.R"))
source(here("functions/remove_do_correction.R"))
source(here("functions/subchunkify.R"))

theme_set(theme_light())

x_axis <- scale_x_continuous("Salinity (PSU)")

dt_options <- list(
  dom = 'ft',
  paging = FALSE,
  searching = TRUE,
  scrollY = "500px",
  columnDefs = list(list(className = 'dt-center', targets = "_all"))
)

# data - preliminary QC 
dat_raw <- readRDS(here("data/sal_rolling_sd_prelim_qc.rds")) %>%
  select(
    -c(int_sample, n_sample, n_sample_effective, sd_roll, rolling_sd_flag_salinity_psu)
  )

counties <- unique(dat_raw$county)

dat_all <- NULL

for(i in seq_along(counties)) {
  
  county_i <- counties[i]
  
  dat_all[[i]] <- dat_raw %>% 
    filter(county == county_i) %>% 
    qc_test_spike(keep_spike_cols = TRUE) %>% 
    select(-c(spike_high, spike_low, spike_flag_salinity_psu))
}

dat_all <- dat_all %>% 
  map_df(bind_rows) %>% 
  # filter_out_suspect_obs() and other foos expects data in the OLD format
  select(
    COUNTY = county, 
    STATION = station, 
    DEPLOYMENT_PERIOD = deployment_range,
    TIMESTAMP = timestamp_utc,
    VALUE = value_salinity_psu,
    DEPTH = sensor_depth_at_low_tide_m,
    everything()) %>% 
  mutate(
    VARIABLE = "Salinity", 
    UNITS = "PSU", 
    YEAR = factor(year(TIMESTAMP))
  ) %>% 
  filter(!is.na(spike_value)) %>% 
  convert_depth_to_ordered_factor()

# filtered data
dat_filt <- dat_all %>% 
  filter_out_suspect_obs() 

# filtered data with no Inverness
dat_no_inverness <- dat_filt %>% filter(COUNTY != "Inverness")

# filtered data with ONLY Inverness
dat_inverness <- dat_filt %>% filter(COUNTY == "Inverness")

county_pal <- get_county_colour_palette(length(unique(dat_all$COUNTY)))
depth_pal <- viridis(length(unique(dat_all$DEPTH)), direction = -1)
year_pal <- viridis( length(unique(dat_all$YEAR)), option = "C")

theme_facet_plotly <- theme(
  panel.spacing.y = unit(30, "lines"),
  panel.spacing.x = unit(20, "lines")
)

```

# Salinity Spikes

November 9, 2023

- Data submitted to the Open Data Portal in December 2022.
- Preliminary QC (submitted to Open Data Portal)
  - Obvious outliers removed.
  - Suspected biofouling removed.
- Filtered Data
  - Additional suspect data trimmed (mostly drift over deployment)

- Following QARTOD: $$spike_{value} = abs(value - spike_{ref})$$ where $spike_{ref} = (lead_{value} - lag_{value}) / 2$

## Preliminary QC 

### Pooled

::: panel-tabset

#### Figure 1: All observations
```{r}
#| label: fig-dist-all
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU).

p <- plot_histogram(dat_all, hist_col = spike_value, binwidth = 0.1) +
  x_axis

ggplotly(p)
```

#### Figure 2: By depth
```{r}
#| label: fig-dist-all-depth
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), coloured by depth.

p <- plot_histogram(
  dat_all, hist_col = spike_value, binwidth = 0.1,
  fill_col = DEPTH, pal = depth_pal
) +
  x_axis

ggplotly(p)
```

#### Figure 3: By year
```{r}
#| label: fig-dist-all-year
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), coloured by year.

p <- plot_histogram(
  dat_all, hist_col = spike_value, binwidth = 0.1, 
  fill_col = YEAR, pal = year_pal
) +
  x_axis

ggplotly(p)
```

:::

### County

::: panel-tabset

#### Figure 4: County 
```{r}
#| label: fig-dist-county
#| fig-height: 8
#| fig-cap: Distribution of salinity observations by county (binwidth = 0.1 PSU).

p <- dat_all %>% 
  plot_histogram(hist_col = spike_value, binwidth = 0.5) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly

ggplotly(p)
```

#### Figure 5: County + Depth
```{r}
#| label: fig-dist-county-depth
#| fig-height: 8
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), within each county, coloured by depth.

p <- plot_histogram(
  dat_all, hist_col = spike_value, binwidth = 0.5, fill_col = DEPTH, pal = depth_pal
) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly
  
ggplotly(p)
```

#### Figure 6: County + Year
```{r}
#| label: fig-dist-county-year
#| fig-height: 8
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), within each county coloured by year.

p <- plot_histogram(
  dat_all, hist_col = spike_value, binwidth = 0.5, fill_col = YEAR, pal = year_pal
) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly

ggplotly(p)
```
:::

#### County + Month + Year

::: panel-tabset
```{r}
#| fig-height: 10
#| results: "asis"

counties <- unique(dat_all$COUNTY)

dat_all <- dat_all %>% 
  mutate(MONTH = month(TIMESTAMP, label = TRUE))

for(i in seq_along(counties)){
  
  county_i <- counties[i]
  dat_i <- dat_all %>% 
    filter(COUNTY == county_i) 
  
  cat('\n###', county_i, '\n')
  
  p <- plot_histogram(
    dat_i, hist_col = spike_value, binwidth = 0.1, fill_col = YEAR, pal = year_pal
  ) +
    x_axis +
    facet_wrap(~MONTH, ncol = 3)  
  
  print(p)
}

```
:::

### Summary Statistics

::: panel-tabset

#### Figure 7: Central Tendancy
```{r}
#| fig-height: 6
#| fig-cap: The mean and standard deviation of spike value in each county.
#| label: fig-mean-all

stats_all <- dat_all %>% 
  summarise(
    max = max(spike_value),
    mean = mean(spike_value),
    med = median(spike_value),
    stdev = sd(spike_value),
    
    q_90 = quantile(spike_value, prob = 0.90),
    q_95 = quantile(spike_value, prob = 0.95),
    q_997 = quantile(spike_value, prob = 0.997)
  ) %>% 
  mutate(COUNTY = "All") %>% 
  bind_rows(
    dat_all %>% 
      group_by(COUNTY) %>% 
      summarise(
        max = max(spike_value),
        mean = mean(spike_value),
        med = median(spike_value),
        stdev = sd(spike_value),
        
        q_90 = quantile(spike_value, prob = 0.90),
        q_95 = quantile(spike_value, prob = 0.95),
        q_997 = quantile(spike_value, prob = 0.997)
      ) 
  ) %>%
  mutate(
    variable = "salinity_psu",
    thresh_3sd = mean + 3 * stdev,
    across(.cols = where(is.numeric), .fns = round, digits = 2)
  ) %>% 
  select(county = COUNTY, everything())

p <- plot_mean_sd_county(stats_all)

ggplotly(p)
```

#### Figure 8: Quantiles
```{r}
#| fig-cap: Upper quantiles.
#| fig-height: 6
#| label: fig-quantiles-all

p <- stats_all %>% 
  select(county, contains("q")) %>% 
  pivot_longer(cols = contains("q"), names_to = "quantile") %>% 
  ggplot(aes(quantile, value, group = county, col = county)) +
  geom_point() +
  geom_line() +
  scale_color_manual(values = c("grey20", county_pal), drop = FALSE) +
  scale_y_continuous(limits = c(0, 2))

ggplotly(p)
```

#### Table 1: Summary statistics
```{r}
stats_all %>% 
  select(-c(variable, max, contains("thresh"))) %>% 
  datatable(
    options = list(
      dom = 'ft',
      paging = FALSE,
      searching = TRUE,
      columnDefs = list(list(className = 'dt-center', targets = "_all"))
    ), rownames = FALSE)
```
:::


## Filtered Data

### Pooled

::: panel-tabset

#### Figure 9: All observations
```{r}
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU).

p <- plot_histogram(dat_filt, hist_col = spike_value, binwidth = 0.1) +
  x_axis

ggplotly(p)
```

#### Figure 10: By depth
```{r}
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), coloured by depth.

p <- plot_histogram(
  dat_filt, hist_col = spike_value, binwidth = 0.1,
  fill_col = DEPTH, pal = depth_pal
) +
  x_axis

ggplotly(p)
```

#### Figure 11: By year
```{r}
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), coloured by year.

p <- plot_histogram(
  dat_all, hist_col = spike_value, binwidth = 0.1, 
  fill_col = YEAR, pal = year_pal
) +
  x_axis

ggplotly(p)
```

:::

### County

::: panel-tabset

#### Figure 12: County 
```{r}
#| fig-height: 8
#| fig-cap: Distribution of salinity observations by county (binwidth = 0.1 PSU).

p <- dat_filt %>% 
  plot_histogram(hist_col = spike_value, binwidth = 0.1) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly

ggplotly(p)
```

#### Figure 13: County + Depth
```{r}
#| fig-height: 8
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), within each county, coloured by depth.

p <- plot_histogram(
  dat_all, hist_col = spike_value, binwidth = 0.1, fill_col = DEPTH, pal = depth_pal
) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly
  
ggplotly(p)
```

#### Figure 14: County + Year
```{r}
#| fig-height: 8
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), within each county coloured by year.

p <- plot_histogram(
  dat_all, hist_col = spike_value, binwidth = 0.1, fill_col = YEAR, pal = year_pal
) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly

ggplotly(p)
```
:::

#### County + Month + Year

::: panel-tabset
```{r}
#| fig-height: 10
#| results: "asis"

dat_filt <- dat_filt %>% 
  mutate(MONTH = month(TIMESTAMP, label = TRUE))

for(i in seq_along(counties)){
  
  county_i <- counties[i]
  dat_i <- dat_filt%>% 
    filter(COUNTY == county_i) 
  
  cat('\n###', county_i, '\n')
  
  p <- plot_histogram(
    dat_i, hist_col = spike_value, binwidth = 0.1, fill_col = YEAR, pal = year_pal
  ) +
    x_axis +
    facet_wrap(~MONTH, ncol = 3)  
  
  print(p)
}

```
:::

### Summary Statistics

::: panel-tabset

#### Figure 15: Central Tendancy
```{r}
#| fig-height: 6
#| fig-cap: The mean and standard deviation of spike value in each county.
#| label: fig-mean-filt

stats_filt <- dat_filt %>% 
  summarise(
    max = max(spike_value),
    mean = mean(spike_value),
    med = median(spike_value),
    stdev = sd(spike_value),
    
    q_90 = quantile(spike_value, prob = 0.90),
    q_95 = quantile(spike_value, prob = 0.95),
    q_997 = quantile(spike_value, prob = 0.997)
  ) %>% 
  mutate(COUNTY = "All") %>% 
  bind_rows(
    dat_filt %>% 
      group_by(COUNTY) %>% 
      summarise(
        max = max(spike_value),
        mean = mean(spike_value),
        med = median(spike_value),
        stdev = sd(spike_value),
        
        q_90 = quantile(spike_value, prob = 0.90),
        q_95 = quantile(spike_value, prob = 0.95),
        q_997 = quantile(spike_value, prob = 0.997)
      ) 
  ) %>%
  mutate(
    variable = "salinity_psu",
    thresh_3sd = mean + 3 * stdev,
    across(.cols = where(is.numeric), .fns = round, digits = 2)
  ) %>% 
  select(county = COUNTY, everything())

p <- plot_mean_sd_county(stats_filt)

ggplotly(p)
```

#### Figure 16: Quantiles
```{r}
#| fig-cap: Upper quantiles.
#| fig-height: 6
#| label: fig-quantiles-filt

p <- stats_filt %>% 
  select(county, contains("q")) %>% 
  pivot_longer(cols = contains("q"), names_to = "quantile") %>% 
  ggplot(aes(quantile, value, group = county, col = county)) +
  geom_point() +
  geom_line() +
  scale_color_manual(values = c("grey20", county_pal), drop = FALSE) +
  scale_y_continuous(limits = c(0, 2))

ggplotly(p)
```

#### Table 2: Summary statistics
```{r}
stats_filt %>% 
  select(-c(variable, max, contains("thresh"))) %>% 
  datatable(
    options = list(
      dom = 'ft',
      paging = FALSE,
      searching = TRUE,
      columnDefs = list(list(className = 'dt-center', targets = "_all"))
    ), rownames = FALSE)
```
:::


## Filtered Data - No Inverness

### Pooled

::: panel-tabset

#### Figure 17: All observations
```{r}
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU).

p <- plot_histogram(dat_no_inverness, hist_col = spike_value, binwidth = 0.1) +
  x_axis

ggplotly(p)
```

#### Figure 18: By depth
```{r}
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), coloured by depth.

p <- plot_histogram(
  dat_no_inverness, hist_col = spike_value, binwidth = 0.1,
  fill_col = DEPTH, pal = depth_pal
) +
  x_axis

ggplotly(p)
```

#### Figure 19: By year
```{r}
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), coloured by year.

p <- plot_histogram(
  dat_no_inverness, hist_col = spike_value, binwidth = 0.1, 
  fill_col = YEAR, pal = year_pal
) +
  x_axis

ggplotly(p)
```

:::

### County

::: panel-tabset

#### Figure 20: County 
```{r}
#| fig-height: 8
#| fig-cap: Distribution of salinity observations by county (binwidth = 0.1 PSU).

p <- dat_no_inverness %>% 
  plot_histogram(hist_col = spike_value, binwidth = 0.1) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly

ggplotly(p)
```

#### Figure 21: County + Depth
```{r}
#| fig-height: 8
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), within each county, coloured by depth.

p <- plot_histogram(
  dat_no_inverness, hist_col = spike_value, binwidth = 0.1, fill_col = DEPTH, pal = depth_pal
) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly
  
ggplotly(p)
```

#### Figure 22: County + Year
```{r}
#| fig-height: 8
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU), within each county coloured by year.

p <- plot_histogram(
  dat_no_inverness, hist_col = spike_value, binwidth = 0.1, fill_col = YEAR, pal = year_pal
) +
  x_axis +
  facet_wrap(~COUNTY, scales = "free", ncol = 3) +
  theme_facet_plotly

ggplotly(p)
```
:::

#### County + Month + Year

::: panel-tabset
```{r}
#| fig-height: 10
#| results: "asis"

counties <- unique(dat_no_inverness$COUNTY)

dat_no_inverness <- dat_no_inverness %>% 
  mutate(MONTH = month(TIMESTAMP, label = TRUE))

for(i in seq_along(counties)){
  
  county_i <- counties[i]
  dat_i <- dat_no_inverness %>% 
    filter(COUNTY == county_i) 
  
  cat('\n###', county_i, '\n')
  
  p <- plot_histogram(
    dat_i, hist_col = spike_value, binwidth = 0.1, fill_col = YEAR, pal = year_pal
  ) +
    x_axis +
    facet_wrap(~MONTH, ncol = 3)  
  
  print(p)
}

```
:::

### Summary Statistics

::: panel-tabset

#### Figure 23: Central Tendancy
```{r}
#| fig-height: 6
#| fig-cap: The mean and standard deviation of spike value in each county.
#| label: fig-mean-no-inv

stats_no_inv <- dat_no_inverness %>% 
  summarise(
    max = max(spike_value),
    mean = mean(spike_value),
    med = median(spike_value),
    stdev = sd(spike_value),
    
    q_90 = quantile(spike_value, prob = 0.90),
    q_95 = quantile(spike_value, prob = 0.95),
    q_997 = quantile(spike_value, prob = 0.997)
  ) %>% 
  mutate(COUNTY = "All") %>% 
  bind_rows(
    dat_no_inverness %>% 
      group_by(COUNTY) %>% 
      summarise(
        max = max(spike_value),
        mean = mean(spike_value),
        med = median(spike_value),
        stdev = sd(spike_value),
        
        q_90 = quantile(spike_value, prob = 0.90),
        q_95 = quantile(spike_value, prob = 0.95),
        q_997 = quantile(spike_value, prob = 0.997)
      ) 
  ) %>%
  mutate(
    variable = "salinity_psu",
    thresh_3sd = mean + 3 * stdev,
    across(.cols = where(is.numeric), .fns = round, digits = 2)
  ) %>% 
  select(county = COUNTY, everything())

p <- plot_mean_sd_county(stats_no_inv)

ggplotly(p)
```

#### Figure 24: Quantiles
```{r}
#| fig-cap: Upper quantiles.
#| fig-height: 6
#| label: fig-quantiles-no-inv

p <- stats_no_inv %>% 
  select(county, contains("q")) %>% 
  pivot_longer(cols = contains("q"), names_to = "quantile") %>% 
  ggplot(aes(quantile, value, group = county, col = county)) +
  geom_point() +
  geom_line() +
  scale_color_manual(values = c("grey20", county_pal), drop = FALSE) +
  scale_y_continuous(limits = c(0, 1))

ggplotly(p)
```

#### Table 3: Summary statistics
```{r}
stats_no_inv %>% 
  select(-c(variable, max, contains("thresh"))) %>% 
  datatable(
    options = list(
      dom = 'ft',
      paging = FALSE,
      searching = TRUE,
      columnDefs = list(list(className = 'dt-center', targets = "_all"))
    ), rownames = FALSE)
```
:::

## Inverness

### Pooled

::: panel-tabset

#### Figure 25: All observations
```{r}
#| fig-height: 6
#| fig-cap: Distribution of salinity observations (binwidth = 0.1 PSU).

p <- plot_histogram(dat_inverness, hist_col = spike_value, binwidth = 0.1) +
  x_axis

ggplotly(p)
```

:::

# Recommendations




