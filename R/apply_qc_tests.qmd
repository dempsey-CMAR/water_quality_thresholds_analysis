---
format: 
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width=8)

library(DT)
library(dplyr)
library(ggplot2)
library(here)
library(microbenchmark)
library(purrr)
library(qaqcmar)
library(sensorstrings)
library(stringr)
library(tidyr)

source(here("functions/subchunkify.R"))

dt_options <- list(
  dom = 'ft',
  paging = FALSE,
  scrollY = "500px",
  searching = TRUE,
  columnDefs = list(list(className = 'dt-center', targets = "_all"))
)

dt_options2 <- list(
  dom = 'ft',
  paging = FALSE,
  searching = TRUE,
  columnDefs = list(list(className = 'dt-center', targets = "_all"))
)

dat_raw <- list.files(
  here("reprocessed-data-raw"),
  full.names = TRUE,
  pattern = "shut-in") %>%
  map(readRDS) %>%
  list_rbind()

# variables in dat_raw
vars <- dat_raw %>% 
  ss_pivot_longer() %>% 
  distinct(variable) %>% 
  arrange()
vars <- sort(vars$variable)
```

Processed on: `r Sys.Date()`

# Shut-In Island

## Station Details

### Deployment Dates
```{r}
dat_raw %>% 
  distinct(deployment_range) %>% 
  separate(
    deployment_range, 
    into = c("deployment_date", "retrieval_date"), 
    sep = " to "
  ) %>% 
  datatable(options = list(
    dom = 'ft',
    paging = FALSE,
    searching = TRUE,
    columnDefs = list(list(className = 'dt-center', targets = "_all"))
  ), rownames = FALSE)
```

### Station Data
```{r}
#| fig-height: 8
ss_ggplot_variables(dat_raw)
```


## Gross Range Test

### Table 1: Gross range thresholds
```{r}
thresholds %>% 
  filter(county == "Halifax"| is.na(county), 
         qc_test == "grossrange") %>% 
  select(-c(county, qc_test, month)) %>% 
  arrange(variable) %>% 
  datatable(options = dt_options, rownames = FALSE, )
```

### Apply test & benchmark
```{r}
#| echo: true
microbenchmark(dat_gr <- qc_test_grossrange(dat_raw), times = 5)
```

### Columns
```{r}
#| echo: true
colnames(dat_gr)
```

### Flag Plots

::: panel-tabset

```{r}
#| results: "asis"
#| fig-height: 10

dat_gr <- dat_gr %>% 
  qc_pivot_longer(qc_tests = "grossrange")

for(i in 1:length(vars)){
  
#for(i in 2){
  
  dat_i <- dat_gr %>% 
    filter(variable == vars[i])
  
  # height of figure 
  sensors <- unique(dat_i$sensor_serial_number)
  n_sensor <- length(sensors)
  
  if(n_sensor < 10) h = 2 * n_sensor
  if(n_sensor >= 10) h = 35 # will get error if this is too big
  
  cat('\n####', vars[i], '\n')
  
  p_i <- qc_plot_flags(dat_i, qc_tests = "grossrange", vars = vars[i]) 
  
  subchunkify(p_i[[1]][[1]], fig_height = h, fig_width = 8.5)
}
 
```
:::

### Flag Summary
```{r}
dat_gr %>% 
  qc_summarise_flags(qc_tests = "grossrange") %>% 
  select(-qc_test) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```


## Climatology Test

### Table 2: Climatology thresholds
```{r}
thresholds %>% 
  filter(county == "Halifax"| is.na(county), 
         qc_test == "climatology") %>% 
  select(-c(county, qc_test, sensor_type)) %>% 
  arrange(variable) %>% 
  datatable(options = dt_options, rownames = FALSE, )
```

### Apply test & benchmark
```{r}
#| echo: true
microbenchmark(dat_cl <- qc_test_climatology(dat_raw), times = 5)
```

### Columns
```{r}
#| echo: true
colnames(dat_cl)
```

### Flag Plots

::: panel-tabset

```{r}
#| results: "asis"
#| fig-height: 10

dat_cl <- dat_cl %>% 
  qc_pivot_longer(qc_tests = "climatology")

for(i in 1:length(vars)){

  dat_i <- dat_cl %>% 
    filter(variable == vars[i])
  
  # height of figure 
  sensors <- unique(dat_i$sensor_serial_number)
  n_sensor <- length(sensors)
  
  if(n_sensor < 10) h = 2 * n_sensor
  if(n_sensor >= 10) h = 35 # will get error if this is too big
  
  cat('\n####', vars[i], '\n')
  
  p_i <- qc_plot_flags(dat_i, qc_tests = "climatology", vars = vars[i]) 
  
  subchunkify(p_i[[1]][[1]], fig_height = h, fig_width = 8.5)
}
 
```
:::

### Flag Summary
```{r}
dat_cl %>% 
  qc_summarise_flags(qc_tests = "climatology") %>% 
  select(-qc_test) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```


## Rolling Standard Deviation Test

### Table 3: Rolling Standard Deviation thresholds
```{r}
thresholds %>% 
  filter(county == "Halifax"| is.na(county), 
         qc_test == "rolling_sd") %>% 
  select(-c(county, qc_test, sensor_type, month)) %>% 
  arrange(variable) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

### Apply test & benchmark
```{r}
#| echo: true
microbenchmark(dat_sd <- qc_test_rolling_sd(dat_raw), times = 5)
```

### Columns
```{r}
#| echo: true
colnames(dat_sd)
```

### Flag Plots

::: panel-tabset

```{r}
#| results: "asis"
#| fig-height: 10

dat_sd <- dat_sd %>% 
  qc_pivot_longer(qc_tests = "rolling_sd")

for(i in 1:length(vars)){
  
  dat_i <- dat_sd %>% 
    filter(variable == vars[i])
  
  # height of figure 
  sensors <- unique(dat_i$sensor_serial_number)
  n_sensor <- length(sensors)
  
  if(n_sensor < 10) h = 2 * n_sensor
  if(n_sensor >= 10) h = 35 # will get error if this is too big
  
  cat('\n####', vars[i], '\n')
  
  p_i <- qc_plot_flags(dat_i, qc_tests = "rolling_sd", vars = vars[i]) 
  
  subchunkify(p_i[[1]][[1]], fig_height = h, fig_width = 8.5)
}
 
```
:::

### Flag Summary
```{r}
dat_sd %>% 
  qc_summarise_flags(qc_tests = "rolling_sd") %>% 
  select(-qc_test) %>% 
  datatable(options = dt_options, rownames = FALSE)
```


## Depth Crosscheck Test

### Table 4: Depth crosscheck thresholds
```{r}
thresholds %>% 
  filter(county == "Halifax"| is.na(county), 
         qc_test == "depth_crosscheck") %>% 
  select(-c(county, qc_test, sensor_type, month)) %>% 
  arrange(variable) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```

### Apply test & benchmark
```{r}
#| echo: true
microbenchmark(dat_depth <- qc_test_depth_crosscheck(dat_raw), times = 5)
```

### Columns
```{r}
#| echo: true
colnames(dat_depth)
```


## Spike Test

### Table 5: Spike Test thresholds
```{r}
thresholds %>% 
  filter(county == "Halifax"| is.na(county), 
         qc_test == "spike") %>% 
  select(-c(county, qc_test, month)) %>% 
  arrange(variable) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```

### Apply test & benchmark
```{r}
#| echo: true
microbenchmark(
  dat_spike <- qc_test_spike(dat_raw, join_column = "sensor_type"), 
  times = 5
)
```

### Columns
```{r}
#| echo: true
colnames(dat_spike)
```

### Flag Plots

```{r}
#| results: "asis"
#| fig-height: 4

dat_spike <- dat_spike %>% qc_pivot_longer(qc_tests = "spike")

for(i in 1:length(vars)){

  dat_i <- dat_spike %>% 
    filter(variable == vars[i])
  
  # height of figure 
  sensors <- unique(dat_i$sensor_serial_number)
  n_sensor <- length(sensors)
  
  if(n_sensor < 10) h = 2 * n_sensor
  if(n_sensor >= 10) h = 35 # will get error if this is too big
  
  cat('\n####', vars[i], '\n')
  
  p_i <- qc_plot_flags(dat_i, qc_tests = "spike", vars = vars[i]) 
  
  subchunkify(p_i[[1]][[1]], fig_height = h, fig_width = 8.5)
}
```

### Flag Summary
```{r}
dat_spike %>% 
  qc_summarise_flags(qc_tests = "spike") %>% 
  select(-qc_test) %>% 
  datatable(options = dt_options2, rownames = FALSE)
```


## All Tests

### Apply test & benchmark
```{r}
#| echo: true
#| message: false

qc_tests = c("grossrange", 
             "climatology", 
             "rolling_sd", 
             "depth_crosscheck", 
             "spike")

microbenchmark(
  dat_all <- qc_test_all(
    dat_raw, 
    qc_tests = qc_tests, 
    join_column_spike = "sensor_type",
    ping = TRUE),
  times = 5
)
```

### Columns
```{r}
#| echo: true
colnames(dat_all)
```

### Check

```{r}
dat_check <- qc_pivot_longer(dat_all, qc_tests = qc_tests)
```

```{r}
#| echo: true
all_equal(
  select(dat_check, grossrange_flag_value),
  select(dat_gr, grossrange_flag_value)
)
```

```{r}
#| echo: true
all_equal(
  select(dat_check, climatology_flag_value), 
  select(dat_cl, climatology_flag_value)
)
```

```{r}
#| echo: true
all_equal(
  select(dat_check, rolling_sd_flag_value),
  select(dat_sd, rolling_sd_flag_value)
)
```

```{r}
#| echo: true

x <-  dat_check %>% 
  select(
    depth_crosscheck_flag_sensor_depth_measured_m = depth_crosscheck_flag_value) %>% 
  filter(depth_crosscheck_flag_sensor_depth_measured_m != 2)

y <- select(dat_depth, depth_crosscheck_flag_sensor_depth_measured_m) %>% 
  filter(depth_crosscheck_flag_sensor_depth_measured_m != 2)

all_equal(x , y)

```

```{r}
#| echo: true
all_equal(
  select(dat_check, spike_flag_value), 
  select(dat_spike, spike_flag_value)
)
```


